 [
    {
      "function": "Check if two strings are anagrams",
      "algorithm": "Sorting",
      "code1": "def are_anagrams_sorting(s1, s2):\n    return sorted(s1) == sorted(s2)",
      "code2": "def are_anagrams_count(s1, s2):\n    return all(s1.count(char) == s2.count(char) for char in set(s1))"
    },
    {
      "function": "Find the kth largest element",
      "algorithm": "Sorting",
      "code1": "def find_kth_largest(nums, k):\n    return sorted(nums, reverse=True)[k-1]",
      "code2": "def find_kth_largest_heap(nums, k):\n    import heapq\n    return heapq.nlargest(k, nums)[-1]"
    },
    {
      "function": "Merge two sorted arrays",
      "algorithm": "Sorting",
      "code1": "def merge_sorted_arrays(arr1, arr2):\n    return sorted(arr1 + arr2)",
      "code2": "def merge_sorted_two_pointers(arr1, arr2):\n    result = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    result.extend(arr1[i:] or arr2[j:])\n    return result"
    },
    {
      "function": "Find all unique triplets that sum to zero",
      "algorithm": "Sorting",
      "code1": "def three_sum(nums):\n    nums.sort()\n    result = []\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        l, r = i+1, len(nums)-1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < 0:\n                l += 1\n            elif s > 0:\n                r -= 1\n            else:\n                result.append([nums[i], nums[l], nums[r]])\n                while l < r and nums[l] == nums[l+1]:\n                    l += 1\n                while l < r and nums[r] == nums[r-1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return result",
      "code2": "def three_sum_bruteforce(nums):\n    from itertools import combinations\n    return list(set(tuple(sorted(t)) for t in combinations(nums, 3) if sum(t) == 0))"
    },
    {
      "function": "Find the minimum difference between two elements",
      "algorithm": "Sorting",
      "code1": "def min_difference(nums):\n    nums.sort()\n    return min(nums[i+1] - nums[i] for i in range(len(nums)-1))",
      "code2": "def min_difference_bruteforce(nums):\n    return min(abs(a - b) for i, a in enumerate(nums) for b in nums[i+1:])"
    },
    {
      "function": "Sort colors (Dutch national flag problem)",
      "algorithm": "Sorting",
      "code1": "def sort_colors(nums):\n    nums.sort()",
      "code2": "def sort_colors_counting(nums):\n    count = [0, 0, 0]\n    for num in nums:\n        count[num] += 1\n    nums[:] = [0]*count[0] + [1]*count[1] + [2]*count[2]"
    },
    {
      "function": "Find all numbers disappeared in an array",
      "algorithm": "Sorting",
      "code1": "def find_disappeared_numbers(nums):\n    return list(set(range(1, len(nums)+1)) - set(sorted(nums)))",
      "code2": "def find_disappeared_numbers_marking(nums):\n    for num in nums:\n        index = abs(num) - 1\n        nums[index] = -abs(nums[index])\n    return [i+1 for i in range(len(nums)) if nums[i] > 0]"
    },
    {
      "function": "Find the longest consecutive sequence",
      "algorithm": "Sorting",
      "code1": "def longest_consecutive_sort(nums):\n    if not nums:\n        return 0\n    nums = sorted(set(nums))\n    max_len = current = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1] + 1:\n            current += 1\n            max_len = max(max_len, current)\n        else:\n            current = 1\n    return max_len",
      "code2": "def longest_consecutive_hash(nums):\n    num_set = set(nums)\n    max_len = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_len = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_len += 1\n            max_len = max(max_len, current_len)\n    return max_len"
    },
    {
      "function": "Find the intersection of two arrays",
      "algorithm": "Sorting",
      "code1": "def intersection_sort(nums1, nums2):\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            if not result or nums1[i] != result[-1]:\n                result.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return result",
      "code2": "def intersection_set(nums1, nums2):\n    return list(set(nums1) & set(nums2))"
    },
    {
      "function": "Find the smallest range covering elements from k lists",
      "algorithm": "Sorting",
      "code1": "def smallest_range_k_lists(nums):\n    merged = sorted([(num, i) for i, lst in enumerate(nums) for num in lst], key=lambda x: x[0])\n    from collections import defaultdict\n    freq = defaultdict(int)\n    left = 0\n    res = [merged[0][0], merged[-1][0]]\n    required = len(nums)\n    current = 0\n    for right in range(len(merged)):\n        if freq[merged[right][1]] == 0:\n            current += 1\n        freq[merged[right][1]] += 1\n        while current == required:\n            if merged[right][0] - merged[left][0] < res[1] - res[0]:\n                res = [merged[left][0], merged[right][0]]\n            freq[merged[left][1]] -= 1\n            if freq[merged[left][1]] == 0:\n                current -= 1\n            left += 1\n    return res",
      "code2": "def smallest_range_heap(nums):\n    import heapq\n    heap = [(lst[0], i, 0) for i, lst in enumerate(nums)]\n    heapq.heapify(heap)\n    max_val = max(row[0] for row in nums)\n    res = [-float('inf'), float('inf')]\n    while heap:\n        min_val, list_idx, elem_idx = heapq.heappop(heap)\n        if max_val - min_val < res[1] - res[0]:\n            res = [min_val, max_val]\n        if elem_idx + 1 == len(nums[list_idx]):\n            return res\n        next_val = nums[list_idx][elem_idx+1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, list_idx, elem_idx+1))"
    }
  ]
