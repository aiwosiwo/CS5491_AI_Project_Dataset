[
    {
        "function": "Sort a list",
        "code1": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[largest] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr",
        "code2": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr"
    },
    {
        "function": "Find the maximum element in a list",
        "code1": "def find_max_divide_and_conquer(arr, left, right):\n    if left == right:\n        return arr[left]\n    mid = (left + right) // 2\n    max_left = find_max_divide_and_conquer(arr, left, mid)\n    max_right = find_max_divide_and_conquer(arr, mid + 1, right)\n    return max(max_left, max_right)",
        "code2": "def find_max_tournament_method(arr):\n    max_element = arr[0]\n    for i in range(1, len(arr), 2):\n        if i == len(arr) - 1:\n            max_element = max(max_element, arr[i])\n        else:\n            temp_max = max(arr[i], arr[i + 1])\n            max_element = max(max_element, temp_max)\n    return max_element"
    },
    {
        "function": "Calculate the factorial of a number",
        "code1": "def factorial_tail_recursive(n, accumulator=1):\n    if n == 0:\n        return accumulator\n    else:\n        return factorial_tail_recursive(n-1, n * accumulator)",
        "code2": "def factorial_loop_unrolling(n):\n    result = 1\n    for i in range(1, n+1, 5):\n        result *= i * (i+1) * (i+2) * (i+3) * (i+4)\n    for j in range(i+1, n+1):\n        result *= j\n    return result"
    },
    {
        "function": "Check if a string is a palindrome",
        "code1": "def is_palindrome_manacher(s):\n    # Transform S into T.\n    # For example, S = \"abba\", T = \"#a#b#b#a#\".\n    T = '#'.join('^{}$'.format(s))\n    n = len(T)\n    P = [0] * n\n    C = R = 0\n    for i in range(1, n-1):\n        P[i] = (R > i) and min(R - i, P[2*C - i]) # equals to i' = C - (i - C)\n        # Attempt to expand palindrome centered at i\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        # If palindrome centered at i expand past R,\n        # adjust center based on expanded palindrome.\n        if i + P[i] > R:\n            C, R = i, i + P[i]\n    return max(P) >= len(s)",
        "code2": "def is_palindrome_stack(s):\n    stack = []\n    length = len(s)\n    mid = length // 2\n    if length % 2 == 0:\n        first_half = s[:mid]\n        second_half = s[mid:]\n    else:\n        first_half = s[:mid]\n        second_half = s[mid+1:]\n    for char in first_half:\n        stack.append(char)\n    for char in second_half:\n        if not stack or stack.pop() != char:\n            return False\n    return True"
    },
    {
        "function": "Generate Fibonacci sequence",
        "code1": "def fibonacci_matrix_exponentiation(n):\n    def multiply(F, M):\n        x = F[0][0] * M[0][0] + F[0][1] * M[1][0]\n        y = F[0][0] * M[0][1] + F[0][1] * M[1][1]\n        z = F[1][0] * M[0][0] + F[1][1] * M[1][0]\n        w = F[1][0] * M[0][1] + F[1][1] * M[1][1]\n        F[0][0] = x\n        F[0][1] = y\n        F[1][0] = z\n        F[1][1] = w\n    def power(F, n):\n        if n == 0 or n == 1:\n            return\n        M = [[1, 1], [1, 0]]\n        power(F, n // 2)\n        multiply(F, F)\n        if n % 2 != 0:\n            multiply(F, M)\n    F = [[1, 1], [1, 0]]\n    if n == 0:\n        return 0\n    power(F, n - 1)\n    return F[0][0]",
        "code2": "def fibonacci_dynamic_programming(n):\n    fib_table = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        fib_table[i] = fib_table[i - 1] + fib_table[i - 2]\n    return fib_table[n]"
    },
    {
        "function": "Reverse a list",
        "code1": "def reverse_list_inplace(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr",
        "code2": "def reverse_list_reducer(arr):\n    from functools import reduce\n    return reduce(lambda acc, x: [x] + acc, arr, [])"
    },
    {
        "function": "Check if a number is prime",
        "code1": "def is_prime_sieve_of_eratosthenes(n):\n    if n <= 1:\n        return False\n    sieve = [True] * (n+1)\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return sieve[n]",
        "code2": "def is_prime_fermat_test(n, k=5):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    def power(x, y, p):\n        res = 1\n        x = x % p\n        while y > 0:\n            if y & 1:\n                res = (res * x) % p\n            y = y >> 1\n            x = (x * x) % p\n        return res\n    for _ in range(k):\n        a = random.randint(2, n - 2)\n        if power(a, n - 1, n) != 1:\n            return False\n    return True"
    },
    {
        "function": "Merge two sorted lists",
        "code1": "def merge_sorted_lists_divide_and_conquer(list1, list2):\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    if list1[0] < list2[0]:\n        return [list1[0]] + merge_sorted_lists_divide_and_conquer(list1[1:], list2)\n    else:\n        return [list2[0]] + merge_sorted_lists_divide_and_conquer(list1, list2[1:])",
        "code2": "def merge_sorted_lists_iterative_efficient(list1, list2):\n    merged = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    while i < len(list1):\n        merged.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged.append(list2[j])\n        j += 1\n    return merged"
    },
    {
        "function": "Calculate the sum of elements in a list",
        "code1": "def sum_of_elements_divide_and_conquer(arr, left, right):\n    if left == right:\n        return arr[left]\n    mid = (left + right) // 2\n    return sum_of_elements_divide_and_conquer(arr, left, mid) + sum_of_elements_divide_and_conquer(arr, mid + 1, right)",
        "code2": "def sum_of_elements_reducer(arr):\n    from functools import reduce\n    return reduce(lambda acc, x: acc + x, arr, 0)"
    },
    {
        "function": "Find the second largest element in a list",
        "code1": "def second_largest_element_divide_and_conquer(arr, left, right):\n    if right - left + 1 == 2:\n        return max(arr[left], arr[right])\n    if right - left + 1 > 2:\n        mid = (left + right) // 2\n        left_max = second_largest_element_divide_and_conquer(arr, left, mid)\n        right_max = second_largest_element_divide_and_conquer(arr, mid + 1, right)\n        return max(left_max, right_max)\n    return arr[left]",
        "code2": "def second_largest_element_single_pass(arr):\n    first, second = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second = first\n            first = arr[i]\n        elif arr[i] > second and arr[i] != first:\n            second = arr[i]\n    return second"
    }
]